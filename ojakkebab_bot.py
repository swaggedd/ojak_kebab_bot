from aiogram import Bot, Dispatcher,types, executor
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import token 
import logging, sqlite3, time

chat_id = '-4143412669'
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)



connection = sqlite3.connect('customer.db')
cursor = connection.cursor()
cursor.execute(f"""CREATE TABLE IF NOT EXISTS users(
    id INTEGER,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    username VARCHAR(100),
    date_joined VARCHAR(100)
    );
    """)
cursor.connection.commit()


cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(100),
        title TEXT,
        phone_number VARCHAR(100),
        address VARCHAR(100)
    );
""")
cursor.connection.commit()


start_keyboard = [
    types.KeyboardButton("–ú–µ–Ω—é"),
    types.KeyboardButton("–û –Ω–∞—Å"),
    types.KeyboardButton("–ê–¥—Ä–µ—Å"),
    types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É")
]


start_button = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_keyboard)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    print(message)
    cursor.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,))
    output_cursor = cursor.fetchall()
    print(output_cursor)
    if output_cursor == []:
        cursor.execute("""
            INSERT INTO users (id, first_name, last_name, username, date_joined)
            VALUES (?, ?, ?, ?, ?)
        """, (
            message.from_user.id, message.from_user.first_name,
            message.from_user.last_name, message.from_user.username,
            time.ctime()
        ))
        cursor.connection.commit()
    await message.answer(f"{message.from_user.full_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –û–∂–∞–∫ –∫–µ–±–∞–ø.", reply_markup=start_button)




@dp.message_handler(text='–ú–µ–Ω—é')
async def menu(message:types.Message):
    await message.answer_photo("https://nambafood.kg/dish_image/163145.png")
    await message.answer("–§–æ—Ä–µ–ª—å –Ω–∞ –º–∞–Ω–≥–∞–ª–µ –∫—É—Å–æ—á–∫–∞–º–∏ - 1140 —Å–æ–º")

    await message.answer_photo("https://plovnaya1.com/thumb/2/4u536ODndldp0QgIbKuM_A/r/d/lyulya-kebab_iz_govyadiny.jpg")
    await message.answer("–õ—é–ª—è –ö–µ–±–∞–± - 180 —Å–æ–º")
    
    await message.answer_photo("https://nambafood.kg/dish_image/150933.png")
    await message.answer("–®–∞—à–ª—ã–∫ –∏–∑ –±–∞—Ä–∞–Ω–∏–Ω—ã - 460 —Å–æ–º")
    
    await message.answer_photo("https://nambafood.kg/dish_image/163137.png")
    await message.answer("–§–æ—Ä–µ–ª—å –Ω–∞ –º–∞–Ω–≥–∞–ª–µ —Ü–µ–ª–∏–∫–æ–º - 710 —Å–æ–º")    
    
    await message.answer_photo("https://nambafood.kg/dish_image/48353.png")
    await message.answer("–®–∞—à–ª—ã–∫ –∏–∑ –∫—É—Ä–∏—Ü—ã - 400 —Å–æ–º")
      
   


@dp.message_handler(text='–û –Ω–∞—Å')
async def about_us(message:types.Message):
    await message.reply(f"""–ö–∞—Ñ–µ "–û–∂–∞–∫ –ö–µ–±–∞–ø" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 18 –ª–µ—Ç —Ä–∞–¥—É–µ—Ç —Å–≤–æ–∏—Ö –≥–æ—Å—Ç–µ–π —Å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–µ—Ü–∫–∏–º–∏ –±–ª—é–¥–∞–º–∏ –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–≤–æ–∏–º –∫–µ–±–∞–±–æ–º. –ù–∞—à–µ –∫–∞—Ñ–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–Ω–æ–≥–∏—Ö –∫–∞—Ñ–µ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º —Å–µ—Ä–≤–∏—Å–æ–º. –í 2016 –≥–æ–¥—É –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é –Ω–∞ —Å–∞–π—Ç–µ "Horeca" –±—ã–ª–∏ —É–¥–æ—Å—Ç–æ–µ–Ω—ã "–õ—É—á—à–µ–µ –∫–∞—Ñ–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å" –∏ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–ø—Ä–∞–≤–¥–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π. –ú—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã, —É—Å–∏–ª–∏—Ç–µ–ª–∏ –≤–∫—É—Å–∞, –∫—Ä–∞—Å–∏—Ç–µ–ª–∏, –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã, —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ –∂–∏—Ä—ã, –≤—Ä–µ–¥–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π ¬´–ï¬ª. –£ –Ω–∞—Å —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: –Ω–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–æ—Ä–º –ö—ã—Ä–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä –∏ —Å–∞–Ω—ç–ø–∏–¥–µ–º—Å—Ç–∞–Ω—Ü–∏–∏. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—è—Å–Ω—É—é –∏ —Ä—ã–±–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –æ—Ç –∫—Ä—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.""")
    

@dp.message_handler(text='–ê–¥—Ä–µ—Å')
async def address(message:types.Message):
        await message.answer("–ù–∞—à –∞–¥—Ä–µ—Å—Å: –ö—É—Ä–º–∞–Ω–∂–∞–Ω-–î–∞—Ç–∫–∞ 246, –û—à, +996700505333")
        await message.answer_location(40.526666914745896, 72.7953323597276)
    
@dp.message_handler(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contact(message:types.Message):
    await message.answer_contact("+996700505333", "–ù–æ–º–µ—Ä –¥–ª—è", "—Å–≤—è–∑–∏")
    await message.answer_contact("+996777515515", "–ù–æ–º–µ—Ä –¥–ª—è", "—Å–≤—è–∑–∏")
    
       
    
    
    
class OrderFoodState(StatesGroup):
    name = State()
    title = State()
    phone_number = State()
    address = State()


@dp.message_handler(text='–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É')
async def ordes(message:types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üëáüèª')
    await OrderFoodState.name.set()


@dp.message_handler(state=OrderFoodState.name)
async def processtitle(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? üëáüèª")
    await OrderFoodState.next()

@dp.message_handler(state=OrderFoodState.title)
async def process_food(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëáüèª")
    await OrderFoodState.next() 
    
    
@dp.message_handler(state=OrderFoodState.phone_number)
async def process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å üëáüèª")
    await OrderFoodState.next()


@dp.message_handler(state=OrderFoodState.address)
async def food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text


    async with state.proxy() as data:
        name = data['name']
        title = data['title']
        phone_number = data['phone_number']
        address = data['address']

    cursor.execute('''
        INSERT INTO orders (name, title, phone_number, address )
        VALUES (?, ?, ?, ?)
    ''', (name, title, phone_number, address))
    connection.commit()
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –Ω–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ü´∂üèª")
    await state.finish()
    await bot.send_message(chat_id=chat_id, text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ üëáüèª:\n–ò–º—è: {name}\n–ó–∞–≥–∞–ª–æ–≤–æ–∫: {title}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑—á–∏–∫–∞: {address}")
    
    
    
executor.start_polling(dp, skip_updates=True)